{"version":3,"sources":["reportWebVitals.js","services/logService.js","services/httpService.js","services/movieService.js","components/common/pagination.jsx","utils/paginate.js","components/common/listGroup.jsx","components/common/searchBox.jsx","services/genreService.js","services/authService.js","components/common/like.jsx","components/common/tableBody.jsx","components/common/tableHeader.jsx","components/common/table.jsx","components/moviesTable.jsx","components/movies.jsx","components/common/input.jsx","components/common/select.jsx","components/common/form.jsx","components/movieForm.jsx","components/customers.jsx","components/rentals.jsx","components/notFound.jsx","components/navBar.jsx","components/loginForm.jsx","services/userService.js","components/registerForm.jsx","components/logout.jsx","components/common/protectedRoute.jsx","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","init","log","error","console","axios","interceptors","response","use","status","logger","toast","Promise","reject","get","post","put","delete","setJwt","jwt","defaults","headers","common","apiEndPoint","apiURL","movieUrl","id","getMovie","movieId","http","saveMovie","movie","_id","body","deleteMovie","Pagination","itemsCount","pageSize","currentPage","onPageChange","pagesCount","Math","ceil","pages","_","range","aria-label","className","map","page","onClick","paginate","items","pageNumber","startIndex","slice","take","value","ListGroup","textProperty","valueProperty","selectedItem","onItemSelect","selected","item","defaultProps","SearchBox","onChange","type","name","placeholder","e","currentTarget","getGenres","tokenKey","getJwt","localStorage","getItem","email","password","a","data","setItem","login","logout","removeItem","getCurrentUser","jwtDecode","ex","loginWithJwt","Like","props","classes","liked","style","cursor","aria-hidden","TableBody","renderCell","column","content","path","createKey","key","this","columns","Component","TableHeader","raiseSort","sortColumn","order","onSort","renderSortIcon","label","Table","MoviesTable","Link","to","title","onLike","deleteColumn","onDelete","user","auth","isAdmin","push","movies","Movies","state","genres","searchQuery","selectedGenre","handleDelete","originalMovies","filter","m","setState","handleLike","index","indexOf","handlePageChange","handleGenreSelect","genre","handleSearch","query","handleSort","getPagedData","allMovies","filtered","toLowerCase","startsWith","orderBy","totalCount","length","count","Input","rest","htmlFor","Select","options","option","Form","validate","Joi","schema","abortEarly","errors","details","message","validateProperty","obj","handleSubmit","preventDefault","doSubmit","handleChange","input","errorMessage","disabled","MovieForm","genreId","numberInStock","dailyRentalRate","string","required","number","min","max","history","match","params","mapToViewModel","replace","populateGenres","populateMovie","onSubmit","renderInput","renderSelect","renderButton","Customers","Rentals","NotFound","NavBar","data-toggle","data-target","aria-controls","aria-expanded","NavLink","Fragment","LoginForm","username","location","window","from","pathname","Redirect","register","RegisterForm","Logout","ProtectedRoute","component","render","Route","App","Switch","exact","process","REACT_APP_NAME","ReactDOM","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.cde6813f.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","function init(){\r\n    // Raven Configuration (Logs)\r\n/*     Raven.config('https://b457deaada7b48b1b55d6d2ca080deed@o574733.ingest.sentry.io/5726101', {\r\n        release: '1-0-0',\r\n        environment: 'development-test',\r\n    }).install() */\r\n}\r\n\r\nfunction log(error){\r\n    console.error(error);\r\n   /*  Raven.captureException(error); */\r\n}\r\n\r\nexport default {\r\n    init,\r\n    log\r\n};","import axios from 'axios';\r\nimport logger from './logService';\r\nimport { toast } from 'react-toastify';\r\n\r\n// Unexpected Errors Handling Globally:\r\n// Unexpected Errors: (Network Down, Server Down, Database Down, Bugs)\r\n// - Log them\r\n// - Display a generic and friendly message.  \r\naxios.interceptors.response.use(null, error => {\r\n  \r\n    const expectedError = \r\n      error.response && \r\n      error.response.status >= 400 && \r\n      error.response.status < 500;\r\n    \r\n    if (!expectedError){\r\n      // Capture an exception with Raven.\r\n      logger.log(error);\r\n      // Show Toast Message in the Browser.\r\n      toast(\"An unexpected error occurred.\");\r\n    }\r\n    \r\n    // Either way we return a rejected promise with the error.\r\n    return Promise.reject(error);\r\n});\r\n\r\n// Get Json Web Token\r\nfunction setJwt(jwt){\r\n  axios.defaults.headers.common[\"x-auth-token\"] = jwt;\r\n}\r\n\r\n\r\n// Export an Object with this methods (get,post,put,delete).\r\nexport default {\r\n    get: axios.get,\r\n    post: axios.post,\r\n    put: axios.put,\r\n    delete: axios.delete,\r\n    setJwt\r\n};","import http from './httpService';\r\nimport { apiURL } from '../config.json';\r\n\r\nconst apiEndPoint = apiURL + \"/movies\";\r\n\r\nfunction movieUrl(id){\r\n    return `${apiEndPoint}/${id}`;\r\n}\r\n\r\n// Get Movies\r\nexport function getMovies(){\r\n    return http.get(apiEndPoint);\r\n}\r\n\r\n// Get Movie\r\nexport function getMovie(movieId){\r\n    return http.get(movieUrl(movieId));\r\n}\r\n\r\n// Save Movie\r\nexport function saveMovie(movie){\r\n    // Update existed movie\r\n    if(movie._id){\r\n        const body = {...movie};\r\n        delete body._id;\r\n        return  http.put(movieUrl(movie._id), body);\r\n    }\r\n    // Add New Movie \r\n    return http.post(apiEndPoint, movie);\r\n}\r\n\r\n// Delete Movie\r\nexport function deleteMovie(movieId){\r\n    return http.delete(movieUrl(movieId));\r\n}","import React, { Component } from 'react';\r\nimport _ from 'lodash';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Pagination = ({ itemsCount, pageSize, currentPage, onPageChange}) => {\r\n\r\n    // we need to generate an Array with this numbers.\r\n    // Math.ceil() is a lodash function.\r\n    const pagesCount = Math.ceil(itemsCount / pageSize);\r\n\r\n    if(pagesCount === 1) return null;\r\n\r\n    const pages = _.range(1, pagesCount + 1);\r\n\r\n    return ( \r\n        <nav aria-label=\"Page navigation example\">\r\n            <ul className=\"pagination\"> \r\n                {pages.map( page => (\r\n                 <li key={page} className={ page === currentPage ? 'page-item active' : 'page-item'}>\r\n                    <a className=\"page-link\" \r\n                        onClick={() => onPageChange(page)}>\r\n                            {page}\r\n                    </a>\r\n                 </li>\r\n                ))}\r\n            </ul>   \r\n        </nav>\r\n     );\r\n};\r\n\r\n// We add a new property to the component:\r\nPagination.propTypes = {\r\n    // we add the props for our component and their TYPES:\r\n    // And whether their REQUIRED or not:\r\n    itemsCount: PropTypes.number.isRequired, \r\n    pageSize: PropTypes.number.isRequired, \r\n    currentPage: PropTypes.number.isRequired, \r\n    onPageChange: PropTypes.func.isRequired\r\n};\r\n \r\nexport default Pagination;\r\n\r\n","import _ from 'lodash';\r\n\r\n// Function to paginate:\r\nexport function paginate(items,pageNumber,pageSize){\r\n    // calculate the starting Index of the items of the pageNumber:\r\n    const startIndex = (pageNumber - 1) * pageSize;\r\n    \r\n    // convert items array into a lodash wrapper\r\n    return _(items) // return a lodash object\r\n        .slice(startIndex) // start from this index\r\n        .take(pageSize) // take items from this current page.\r\n        .value(); // convert lodash wrapper into a regular array.\r\n}","import React from 'react';\r\n\r\nconst ListGroup = ({ items,textProperty,valueProperty,selectedItem,onItemSelect}) => {\r\n\r\n    const selected = \"list-group-item\";\r\n\r\n    return (\r\n    <ul className=\"clickable list-group\">\r\n        {items.map(item => (\r\n            <li key={item[valueProperty]}\r\n                onClick={() => onItemSelect(item)} \r\n                className={item === selectedItem ? selected + \" active\" : selected}\r\n            >\r\n                {item[textProperty]}\r\n            </li>\r\n        ))}     \r\n    </ul>\r\n    );\r\n}\r\n \r\nListGroup.defaultProps = {\r\n    textProperty: 'name',\r\n    valueProperty: '_id'\r\n};\r\n\r\nexport default ListGroup;","import React from 'react';\r\n\r\nconst SearchBox = ({value,onChange}) => {\r\n\r\n    return ( \r\n        <input\r\n            type=\"text\"\r\n            name=\"query\"\r\n            placeholder=\"Search...\"\r\n            value={value}\r\n            onChange={e => onChange(e.currentTarget.value) }\r\n            className=\"form-control mb-3\"\r\n        />\r\n     );\r\n};\r\n \r\nexport default SearchBox;","import http from './httpService';\r\nimport { apiURL } from '../config.json';\r\n\r\n\r\nexport function getGenres() {\r\n    return http.get(apiURL + '/genres');\r\n}","import http from './httpService';\r\nimport { apiURL } from '../config.json';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nconst apiEndPoint = apiURL + \"/auth\";\r\nconst tokenKey = \"token\";\r\n\r\n// Get Json Web Token from http module.\r\nhttp.setJwt(getJwt());\r\n\r\n// GET JSON Web Token:\r\nexport function getJwt(){\r\n    return localStorage.getItem(tokenKey);\r\n}\r\n\r\n\r\n\r\n// LOGIN: (loginForm.jsx)\r\nexport async function login(email,password){\r\n    const { data: jwt } = await http.post(apiEndPoint, {email,password});\r\n    // save Json Web Token in the client.\r\n    localStorage.setItem(tokenKey, jwt);\r\n}\r\n\r\n// LOGIN with Jwt: (registerForm.jsx)\r\nexport function loginWithJwt(jwt){\r\n    localStorage.setItem (tokenKey, jwt);\r\n}\r\n\r\n\r\n\r\n// LOG OUT: (logout.jsx)\r\nexport function logout(){\r\n    // Remove Token from the localStorage:\r\n    localStorage.removeItem(tokenKey);\r\n}\r\n\r\n\r\n\r\n// Get Current User with Json Token: (App.js)\r\nexport function getCurrentUser(){\r\n    try {\r\n        // Get Json Web Token from localStorage:\r\n        const jwt = localStorage.getItem(tokenKey);\r\n        // Get Current User Object:\r\n        return jwtDecode(jwt);            \r\n      } catch (ex) {\r\n        return null; // in case we do not have current user.\r\n      }\r\n}\r\n\r\n\r\n\r\n// export login and logout functions.\r\nexport default {\r\n    login,\r\n    logout,\r\n    getCurrentUser,\r\n    loginWithJwt,\r\n    getJwt\r\n};\r\n\r\n","import React from 'react';\r\n\r\n// Stateless Functional Componenet\r\nconst Like = (props) => {\r\n    let classes = \"fa fa-heart\";\r\n    if(!props.liked) classes += \"-o\";\r\n    return (\r\n        <i className={classes} \r\n            style={{ cursor: 'pointer'}} \r\n            onClick={props.onClick} \r\n            aria-hidden=\"true\" />\r\n    );\r\n}\r\n \r\nexport default Like;","import React, { Component } from 'react';\r\nimport _ from 'lodash';\r\n\r\nclass TableBody extends Component {\r\n\r\n    // Render Content for each <td>:\r\n    // method to render like button and/or delete button\r\n    // depend on the content of the column.\r\n    renderCell = (item, column) => {\r\n        // if we have content within the column, we return the content.\r\n        if (column.content) return column.content(item);\r\n\r\n        return _.get(item,column.path);\r\n    };\r\n\r\n    // CreateKey Method for each <td>:\r\n    createKey = (item,column) => {\r\n        return item._id + (column.path || column.key);\r\n    };\r\n\r\n\r\n    render() { \r\n        // Object Destructoring\r\n        const { data, columns } = this.props;\r\n\r\n        return (\r\n            <tbody>\r\n              {data.map(item => (\r\n                <tr key={item._id}>\r\n                  {columns.map(column => (\r\n                    <td key={this.createKey(item, column)}>\r\n                      {this.renderCell(item, column)}\r\n                    </td>\r\n                  ))}\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          );\r\n    }\r\n}\r\n \r\nexport default TableBody;","import React, { Component } from 'react';\r\n\r\n// Input Properties we need here: \r\n// 1.- columns: array, \r\n// 2.- sortColumn: object, \r\n// 3.- onSort: function\r\nclass TableHeader extends Component {\r\n\r\n    // Sorting Columns:\r\n    raiseSort = (path) => {\r\n        // we clone the sortColumn object:\r\n        const sortColumn = {...this.props.sortColumn};\r\n        // sorting 'asc' or 'desc' depends on the path and order:\r\n        if(sortColumn.path === path)\r\n            sortColumn.order = sortColumn.order === \"asc\" ? \"desc\" : \"asc\";\r\n        else {\r\n            sortColumn.path = path;\r\n            sortColumn.order = \"asc\";\r\n        }   \r\n        // Raise the Sort Event to movies.jsx:\r\n        this.props.onSort(sortColumn); \r\n     };\r\n\r\n    // renderSortIcon()\r\n    renderSortIcon = column => {\r\n\r\n        // Object Destructoring to clean code a little:\r\n        const { sortColumn } = this.props;\r\n\r\n        // see if current sortColumn is different from column\r\n        // we don't want to render any icons.\r\n        if(column.path !== sortColumn.path)\r\n            return null;\r\n        \r\n        // we need to render different icons depending of the sort order:\r\n        if(sortColumn.order === 'asc') \r\n            return <i className=\"fa fa-sort-asc\"></i>\r\n        \r\n        return <i className=\"fa fa-sort-desc\"></i>  \r\n\r\n    }\r\n\r\n\r\n    render() { \r\n        return ( \r\n           <thead>\r\n               <tr>\r\n                   {this.props.columns.map(column => (\r\n                        <th key={column.path || column.key} \r\n                            onClick={() => this.raiseSort(column.path)}\r\n                            className=\"clickable\"\r\n                        >\r\n                            { column.label } {this.renderSortIcon(column)}\r\n                        </th>\r\n                   ))}\r\n               </tr>\r\n           </thead>\r\n        );\r\n    }\r\n}\r\n \r\nexport default TableHeader;","import React, { Component } from 'react';\r\nimport TableBody from './tableBody';\r\nimport TableHeader from './tableHeader';\r\n\r\n// Input Properties we need here: \r\n// 1.- columns: array, \r\n// 2.- sortColumn: object, \r\n// 3.- onSort: function\r\n// 4.- data: movies\r\nconst Table = ({ data, columns, sortColumn, onSort }) => {\r\n\r\n    return ( \r\n        <table className=\"table\">\r\n            <TableHeader \r\n                columns={columns}\r\n                sortColumn={sortColumn}\r\n                onSort={onSort}\r\n            />\r\n            <TableBody \r\n                data={data}\r\n                columns={columns}\r\n            />\r\n        </table> \r\n     );\r\n}\r\n \r\nexport default Table;","import React, {Component} from 'react';\r\nimport auth from '../services/authService';\r\nimport Like from './common/like';\r\nimport { Link } from 'react-router-dom';\r\nimport Table from './common/table';\r\n\r\n\r\nclass MoviesTable extends Component {\r\n\r\n    columns = [\r\n        { \r\n          path: \"title\", \r\n          label: \"Title\", \r\n          content: movie => <Link to={`/movies/${movie._id}`}>{movie.title}</Link> \r\n        },\r\n        { path: \"genre.name\", label: \"Genre\" },\r\n        { path: \"numberInStock\", label: \"Stock\" },\r\n        { path: \"dailyRentalRate\", label: \"Rate\" },\r\n        {\r\n          key: \"like\",\r\n          content: movie => (\r\n            <Like liked={movie.liked} onClick={() => this.props.onLike(movie)} />\r\n          )\r\n        }\r\n    ];\r\n\r\n\r\n    // Column for Delete Button\r\n    deleteColumn = {\r\n        key: \"delete\",\r\n        content: movie => (\r\n          <button\r\n            onClick={() => this.props.onDelete(movie)}\r\n            className=\"btn btn-danger btn-sm\"\r\n          >\r\n            Delete\r\n          </button>\r\n        )   \r\n    }\r\n\r\n\r\n    constructor(){\r\n      // Call constructor of the parent class.\r\n      super();\r\n      // get current user from authService.\r\n      const user =  auth.getCurrentUser();\r\n      if(user && user.isAdmin) \r\n        this.columns.push(this.deleteColumn);\r\n    }\r\n\r\n\r\n    render() { \r\n        // Object Destructoring\r\n        const {movies, onSort, sortColumn } = this.props;\r\n\r\n        return ( \r\n            // Table Component that we can reuse in the future.\r\n            // for another table like customers, productos, etc.\r\n           <Table \r\n                data={movies}\r\n                onSort={onSort}\r\n                sortColumn={sortColumn}\r\n                columns={this.columns}\r\n            /> \r\n        );\r\n    }\r\n}\r\n \r\n\r\n \r\nexport default MoviesTable;","import React, { Component } from 'react';  \r\nimport { getMovies, deleteMovie } from '../services/movieService'; \r\nimport Pagination from './common/pagination';\r\nimport { paginate } from '../utils/paginate';\r\nimport ListGroup from './common/listGroup';\r\nimport { Link } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport SearchBox from './common/searchBox';\r\nimport { getGenres } from '../services/genreService';\r\nimport MoviesTable from './moviesTable';\r\nimport _ from 'lodash';\r\n\r\nclass Movies extends Component {\r\n    state = {  \r\n        movies: [],\r\n        genres: [],\r\n        pageSize: 4,\r\n        currentPage: 1,\r\n        searchQuery: \"\",\r\n        selectedGenre: null,\r\n        sortColumn: { path: 'title', order: 'asc' }\r\n    };\r\n\r\n    // componentDidMount()\r\n    // this method is called after the component is render into the DOM\r\n    // perfect place for AJAX Calls from the Server.\r\n    async componentDidMount(){ \r\n\r\n        const { data } = await getGenres();\r\n        const genres = [{ _id: '', name: 'All Genres' }, ...data];\r\n\r\n        const { data: movies } = await getMovies();\r\n        this.setState({ movies, genres }); \r\n \r\n    }\r\n\r\n    // Method Delete\r\n    handleDelete = async movie => {\r\n\r\n        const originalMovies = this.state.movies;\r\n\r\n        // Filtering all movies except the selected one.\r\n       const movies = originalMovies.filter(m => m._id !== movie._id);\r\n       // Update the state with the new array without the selected one.\r\n       this.setState({movies});\r\n\r\n       try{\r\n           await deleteMovie(movie._id);\r\n       }\r\n       catch (ex){\r\n           if(ex.response && ex.response.status === 404)\r\n            toast.error('Ths movie has already been deleted');\r\n\r\n          // we should un-do the changes (roll-back)\r\n          this.setState({ movies: originalMovies}); \r\n       }\r\n       \r\n    };\r\n\r\n    // handleLike()\r\n    handleLike = (movie) => {\r\n        const movies = [...this.state.movies];\r\n        const index = movies.indexOf(movie);\r\n        movies[index] = {...movies[index]};\r\n        movies[index].liked = !movies[index].liked;\r\n        this.setState({movies});\r\n    };\r\n\r\n    // handlePageChange()\r\n    handlePageChange = (page) => {\r\n        this.setState({ currentPage: page});\r\n    };\r\n\r\n    // handleGenreSelect()\r\n    handleGenreSelect = (genre) => {\r\n        // update selectedGenre state and current page to 1.\r\n        this.setState({ selectedGenre: genre, searchQuery: \"\", currentPage: 1})\r\n    };\r\n\r\n    // handleGenreSelect()\r\n    handleSearch = (query) => {\r\n        // update selectedGenre state and current page to 1.\r\n        this.setState({ searchQuery: query, selectedGenre: null, currentPage: 1})\r\n    };\r\n\r\n    // handleSort()\r\n    handleSort = (sortColumn) => {\r\n         this.setState({ sortColumn });\r\n    };\r\n\r\n    // Filtering, Sorting and Pagination.\r\n    getPagedData = () => {\r\n\r\n        // Object Destructoring to cleaner our code:\r\n        const { \r\n            pageSize, \r\n            currentPage, \r\n            selectedGenre, \r\n            movies: allMovies,\r\n            searchQuery,\r\n            sortColumn \r\n        } = this.state;\r\n\r\n        // Filtering Movies by Genres:\r\n        let filtered = allMovies;\r\n\r\n        // If we have a searchQuery, we filter the movies by title,\r\n        // otherwise, we filter movies by genre.\r\n        if(searchQuery)\r\n            filtered = allMovies.filter( m => \r\n                m.title.toLowerCase().startsWith(searchQuery.toLowerCase())\r\n            );\r\n        // if we have genre, we filter movies by genre.\r\n        else if (selectedGenre && selectedGenre._id)\r\n            filtered = allMovies.filter(m => m.genre._id === selectedGenre._id);\r\n\r\n        // Sorting Column after Filtering Data:\r\n        const sorted = _.orderBy(filtered,[sortColumn.path],[sortColumn.order]);\r\n\r\n        // Paginate Movies (paginate passing the filtered movies):\r\n        const movies = paginate(sorted,currentPage,pageSize);  \r\n        \r\n        return { totalCount: filtered.length, data: movies };\r\n    };\r\n\r\n \r\n    render() {      \r\n\r\n        // Object Destructoring to cleaner our code:\r\n        const { length: count } = this.state.movies;\r\n        const { pageSize, currentPage, sortColumn, searchQuery } = this.state;\r\n        // Estract the current user from App.js\r\n        const { user } = this.props;        \r\n\r\n        if(count === 0)\r\n            return <p>There are no movies in the database.</p>;\r\n\r\n         // Filtering, Sorting and Pagination.\r\n         // return total movies and movies filtered,sorted and paginate:\r\n        const { totalCount, data} = this.getPagedData();\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-3\">\r\n                    <ListGroup items={this.state.genres} \r\n                                selectedItem={this.state.selectedGenre}\r\n                                onItemSelect={this.handleGenreSelect}\r\n                    />\r\n                </div> \r\n                <div className=\"col\">\r\n                   {user && user.isAdmin && (\r\n                        <Link \r\n                            to=\"/movies/new\"\r\n                            className=\"btn btn-primary mb-3\"\r\n                        >\r\n                            New Movie\r\n                        </Link>\r\n                    )}\r\n                    <p>Showing {totalCount} movies in the database.</p>\r\n                    <SearchBox\r\n                        value={searchQuery}\r\n                        onChange={this.handleSearch}\r\n                    />\r\n                    <MoviesTable \r\n                        movies={data}\r\n                        sortColumn={sortColumn}\r\n                        onLike={this.handleLike}\r\n                        onDelete={this.handleDelete}\r\n                        onSort={this.handleSort}\r\n                    />\r\n                    <Pagination \r\n                        itemsCount={totalCount} \r\n                        pageSize={pageSize}\r\n                        currentPage={currentPage}\r\n                        onPageChange={this.handlePageChange}\r\n                    />\r\n                </div>                \r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n \r\nexport default Movies;","import React from 'react';\r\n\r\nconst Input = ({ name, label, error, ...rest  }) => {\r\n    return ( \r\n        <div className=\"form-group\">\r\n            <label htmlFor={name}>{ label }</label>\r\n            <input \r\n                {...rest}\r\n                name={name}\r\n                id={name}\r\n                className=\"form-control\"\r\n            />\r\n            { error && <div className=\"alert alert-danger\">{error}</div>}\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Input;","import React from 'react';\r\n\r\nconst Select = ({ name, label, error, options, ...rest }) => {\r\n    return ( \r\n        <div className=\"form-group\">\r\n            <label htmlFor={name}>{ label }</label>\r\n            <select name={name} id={name} {...rest} className=\"form-control\">\r\n                <option value=\"\"/>\r\n                    {options.map(option => (\r\n                        <option key={option._id} value={option._id}>\r\n                            {option.name}\r\n                        </option>\r\n                    ))}\r\n            </select>\r\n            { error && <div className=\"alert alert-danger\">{error}</div>}\r\n        </div>        \r\n     );\r\n}\r\n \r\nexport default Select;","import React, { Component } from 'react';\r\nimport Joi from 'joi-browser';\r\nimport Input from './input';\r\nimport Select from './select';\r\n\r\n\r\nclass Form extends Component {\r\n    state = { \r\n        data: {},\r\n        error: {}\r\n    };\r\n\r\n    // Basic Validation:\r\n    // this method either return 'null' or an object with 1 or more Errors.\r\n    validate = () => {\r\n\r\n        const options = { abortEarly: false };\r\n\r\n        // we call Joi for Validation:\r\n        // validate(1st the state we want to validate,2nd the joi schema, 3rd. abortEarly: false):\r\n        const { error } = Joi.validate(this.state.data, this.schema, options);     \r\n        // if result.error is falsy, we return null\r\n        if(!error) return null;\r\n\r\n        // otherwise: we map an array into an object.\r\n        const errors = {};\r\n        for(let item of error.details)\r\n            errors[item.path[0]]= item.message;\r\n        return errors;\r\n    };\r\n\r\n    // Basic Validation (single property):\r\n    // We only want to validate 1 input field.\r\n    validateProperty = ({ name, value }) => {\r\n        // create an object in which we have a single property\r\n        const obj = { [name]: value };\r\n        // create an object with schema (only 1 property)\r\n        const schema = { [name]: this.schema[name] };\r\n        const {error} = Joi.validate(obj, schema);\r\n        // if error is defined we return the message, otherwise we return null.\r\n        return error ? error.details[0].message : null;\r\n    };\r\n\r\n\r\n    handleSubmit = e => {\r\n        // Prevent default behavior (page reload)\r\n        e.preventDefault();\r\n\r\n        // Validate the data, everytime the user click submit button:\r\n        const errors = this.validate();\r\n        // We update the state errors, that will the re-rendering and we can render error messages.\r\n        // We will update the state if errors is trusty or an empty object\r\n        this.setState({ errors: errors || {} });\r\n        if(errors) return;\r\n\r\n        this.doSubmit();\r\n\r\n    };\r\n\r\n\r\n    // When the value of the input change.\r\n    handleChange = ({ currentTarget: input }) => {\r\n\r\n        // VALIDATE THE INPUT FIELD:\r\n        // clone the errors property of state object\r\n        const errors = {...this.state.errors};\r\n        const errorMessage = this.validateProperty(input);\r\n        // we validate the error message returned.\r\n        // if errorMessage is truthy we store it in the errors object cloned before.\r\n        if(errorMessage) errors[input.name] = errorMessage;\r\n        // if we do not get an error message, we delete the existing property.\r\n        else delete errors[input.name];\r\n\r\n\r\n        // UPDATE THE STATE:\r\n        // we will clone the state and then let React change it.\r\n        const data = {...this.state.data};\r\n        // get the input fields name property dinamically (with the property 'name').\r\n        data[input.name] = input.value;\r\n        // then we let React change the state with the new data object.\r\n        this.setState({ data, errors });\r\n    };    \r\n\r\n\r\n    // RenderButton in the Browser.\r\n    renderButton(label) {\r\n        return  (                   \r\n            <button \r\n            // this.validate(): \r\n            // if returns null  is considered 'falsy' (disabled button) = false\r\n            // if returns an object is considered 'truthy' (enabled button) = true\r\n                disabled={this.validate()}\r\n                className=\"btn btn-primary\">\r\n                    {label}\r\n            </button>\r\n        );\r\n    }\r\n\r\n    // Render Input Field in the Browser.\r\n    renderInput(name,label,type){\r\n        // Object Destructorin to clean the code.\r\n        const { data, errors } = this.state;\r\n        return (\r\n            <Input \r\n            type={type}\r\n            name={name}\r\n            value={data[name]}\r\n            label={label}\r\n            onChange={this.handleChange}\r\n            error={errors[name]}\r\n        />  \r\n        );\r\n    }\r\n\r\n    // Render Select Field in the Browser.\r\n    renderSelect(name,label,options){\r\n\r\n        const { data, errors } = this.state;\r\n\r\n        return (\r\n            <Select \r\n                name={name}\r\n                value={data[name]}\r\n                label={label}\r\n                options={options}\r\n                onChange={this.handleChange}\r\n                error={errors[name]}\r\n            />\r\n        );\r\n    }\r\n\r\n\r\n\r\n}\r\n \r\nexport default Form;","\r\nimport React from 'react';\r\nimport Joi  from 'joi-browser';\r\nimport Form from './common/form';\r\nimport { getMovie, saveMovie } from '../services/movieService';\r\nimport { getGenres } from '../services/genreService';\r\n\r\nclass MovieForm extends Form {\r\n\r\n    state = {\r\n        data: { \r\n            title: \"\", \r\n            genreId: \"\", \r\n            numberInStock: \"\", \r\n            dailyRentalRate: \"\" \r\n        },\r\n        genres: [],\r\n        errors: {}\r\n    };\r\n\r\n    // Joi Schema (API)\r\n    schema = {\r\n        _id: Joi.string(),\r\n        title: Joi.string()\r\n            .required()\r\n            .label(\"Title\"),\r\n        genreId: Joi.string()\r\n            .required()\r\n            .label('Genre'),\r\n        numberInStock: Joi.number()\r\n            .required()\r\n            .min(0)\r\n            .max(100)\r\n            .label('Number in Stock'),\r\n        dailyRentalRate: Joi.number()\r\n            .required()\r\n            .min(0)\r\n            .max(10)\r\n            .label('Daily Rental Rate')\r\n    };\r\n\r\n    // Populate the GENRES:\r\n    async populateGenres(){  \r\n        const { data: genres} = await getGenres();\r\n        this.setState({ genres });\r\n    }\r\n\r\n    // Populate MOVIE:\r\n    async populateMovie(){\r\n\r\n\r\n        // if movie does not exist, redirect to not-found page.\r\n        try{\r\n            // If movie is new return the empty form\r\n            const movieId = this.props.match.params.id;\r\n            if(movieId=== \"new\") return;\r\n\r\n            // we get movies.\r\n            const { data: movie} = await getMovie(movieId);\r\n            // Update State.\r\n            this.setState( { data: this.mapToViewModel(movie)} );            \r\n        }\r\n        catch(ex){\r\n            if(ex.response && ex.response.status === 404) \r\n                this.props.history.replace(\"/not-found\");\r\n        }\r\n    }\r\n\r\n\r\n   async componentDidMount(){\r\n        await this.populateGenres();\r\n        await this.populateMovie();\r\n    }\r\n\r\n\r\n    mapToViewModel(movie) {\r\n        return {\r\n            _id: movie._id,\r\n            title: movie.title,\r\n            genreId: movie.genre._id,\r\n            numberInStock: movie.numberInStock,\r\n            dailyRentalRate: movie.dailyRentalRate\r\n        };\r\n    }\r\n\r\n\r\n    doSubmit = async () => {\r\n\r\n        // Save Movie.\r\n        await saveMovie(this.state.data);\r\n\r\n        // Redirect user to movies page.\r\n        this.props.history.push(\"/movies\");\r\n\r\n        // Call the server for update data.\r\n        console.log(\"Form Submitted\");\r\n    };\r\n\r\n\r\n\r\n    render() { \r\n        return (\r\n            <div className=\"container\">\r\n                <h1 className=\"title_h1\">Movie Form</h1>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    {this.renderInput('title','Title','text')}\r\n                    {this.renderSelect('genreId','Genre', this.state.genres)}\r\n                    {this.renderInput('numberInStock','Number in Stock','number')}\r\n                    {this.renderInput('dailyRentalRate','Rate','number')}\r\n                {this.renderButton('Save')}\r\n                </form>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n\r\n}\r\n \r\nexport default MovieForm;\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n \r\n \r\n\r\n \r\n\r\n\r\n","import React, { Component } from 'react';\r\n\r\nclass Customers extends Component {\r\n    render() { \r\n        return <h1>Customers</h1>;\r\n    }\r\n}\r\n \r\nexport default Customers;","import React, { Component } from 'react';\r\n\r\nclass Rentals extends Component {\r\n    render() { \r\n        return <h1>Rentals</h1>;\r\n    }\r\n}\r\n \r\nexport default Rentals;","import React, { Component } from 'react';\r\n\r\nclass NotFound extends Component {\r\n    render() { \r\n        return <h1>Not Found</h1>;\r\n    }\r\n}\r\n \r\nexport default NotFound;","import React, { Component } from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\n\r\nconst NavBar = ({ user }) => {\r\n        return ( \r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <Link className=\"navbar-brand\" to=\"/\">\r\n                Vidly\r\n            </Link>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n                <div className=\"navbar-nav\">\r\n                <NavLink className=\"nav-item nav-link\" to=\"/movies\">\r\n                    Movies <span className=\"sr-only\">(current)</span>\r\n                </NavLink>\r\n                <NavLink className=\"nav-item nav-link\" to=\"/customers\">\r\n                    Customers\r\n                </NavLink>\r\n                <NavLink className=\"nav-item nav-link\" to=\"/rentals\">\r\n                    Rentals\r\n                </NavLink>\r\n                {!user && (\r\n                <React.Fragment>\r\n                    <NavLink className=\"nav-item nav-link\" to=\"/login\">\r\n                        Login\r\n                    </NavLink>       \r\n                    <NavLink className=\"nav-item nav-link\" to=\"/Register\">\r\n                        Register\r\n                    </NavLink>  \r\n                </React.Fragment>\r\n                )}      \r\n                {user && (\r\n                <React.Fragment>\r\n                    <NavLink className=\"nav-item nav-link\" to=\"/profile\">\r\n                        {user.name}\r\n                    </NavLink>       \r\n                    <NavLink className=\"nav-item nav-link\" to=\"/logout\">\r\n                        Logout\r\n                    </NavLink>  \r\n                </React.Fragment>\r\n                )}                     \r\n                </div>\r\n            </div>\r\n            </nav>            \r\n        );\r\n}\r\n \r\n\r\n\r\nexport default NavBar;","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Joi, { errors }  from 'joi-browser';\r\nimport Form from './common/form';\r\nimport  auth  from '../services/authService';\r\n\r\nclass LoginForm extends Form {\r\n\r\n    state = {\r\n        // Properties for values:\r\n        data: { username: \"\", password: \"\"},\r\n        // Properties for errors:\r\n        errors: {}\r\n    };\r\n\r\n    // Joi Schema (API)\r\n    schema = {\r\n        username: Joi.string()\r\n            .required()\r\n            .label('Username'),\r\n        password: Joi.string()\r\n            .required()\r\n            .label('Password')\r\n    };\r\n\r\n    doSubmit = async () => {\r\n        try {\r\n            // Login User.\r\n            const { data } = this.state;\r\n            await auth.login(data.username, data.password); \r\n            // Pick the state property form location object:\r\n            const { state } = this.props.location;\r\n            // If we have the state (current location) we redirect to previous path, otherwise redirect to home:\r\n            window.location = state ? state.from.pathname : '/';\r\n        } catch (ex) {\r\n            if(ex.response && ex.response.status === 400){\r\n                const errors = {...this.state.errors};\r\n                // display error that is coming from the server.\r\n                errors.username = ex.response.data;\r\n                this.setState({ errors });\r\n            }\r\n        }\r\n    };\r\n\r\n    render() { \r\n        // If we have a user Loged In, redirect to home. Otherwise, redirect to login Form:\r\n        if(auth.getCurrentUser()) return <Redirect to=\"/\" />\r\n        return (\r\n            <div className=\"container\">\r\n                <h1 className=\"title_h1\">Login</h1>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    {this.renderInput('username','Username','text')}\r\n                    {this.renderInput('password','Password','password')}\r\n                {this.renderButton('Login')}\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default LoginForm;\r\n\r\n","import http from './httpService';\r\nimport { apiURL } from '../config.json';\r\n\r\nconst apiEndPoint = apiURL + \"/users\";\r\n\r\nexport function register(user) {\r\n    // Update Existing User:\r\n    if(user._id){\r\n        return http.put(apiEndPoint, {\r\n            email: user.username,\r\n            password: user.password,\r\n            name: user.name\r\n        });  \r\n    }\r\n    // Add New User:\r\n    return http.post(apiEndPoint, {\r\n        email: user.username,\r\n        password: user.password,\r\n        name: user.name\r\n    });\r\n}","import React from 'react';\r\nimport { register } from '../services/userService';\r\nimport Joi  from 'joi-browser';\r\nimport Form from './common/form';\r\nimport auth from '../services/authService';\r\n\r\nclass RegisterForm extends Form {\r\n\r\n    state = {\r\n        data: { username: \"\", password: \"\", name: \"\" },\r\n        errors: {}\r\n    };\r\n\r\n    // Joi Schema (API)\r\n    schema = {\r\n        username: Joi.string()\r\n            .required()\r\n            .email()\r\n            .label('Username'),\r\n        password: Joi.string()\r\n            .required()\r\n            .min(5)\r\n            .label('Password'),\r\n        name: Joi.string()\r\n            .required()\r\n            .label('Name')\r\n    };\r\n\r\n    // Submit Form: Register User.\r\n    doSubmit = async () => {\r\n        try{\r\n            // Save User Data.\r\n            const response = await register(this.state.data);\r\n            // Save Web Token in the client.\r\n            auth.loginWithJwt(response.headers['x-auth-token']);\r\n            // Do a full reload of the Application.\r\n            window.location = \"/\";\r\n        }\r\n        catch(ex){\r\n            if(ex.response && ex.response.status === 400){\r\n                const errors = {...this.state.errors};\r\n                errors.username = ex.response.data;\r\n                this.setState({errors});\r\n            }\r\n        }\r\n    };\r\n\r\n   \r\n    render() { \r\n        return (\r\n            <div className=\"container\">\r\n                <h1 className=\"title_h1\">Register</h1>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    {this.renderInput('username','Email','text')}\r\n                    {this.renderInput('password','Password','password')}\r\n                    {this.renderInput('name','Name','text')}\r\n                {this.renderButton('Register')}\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default RegisterForm;","import { Component } from 'react';\r\nimport  auth  from '../services/authService';\r\n\r\nclass Logout extends Component {\r\n\r\n    componentDidMount(){\r\n        // call logout function():\r\n        auth.logout();\r\n        // Redirect to home page and Reload App:\r\n        window.location = \"/\";\r\n    }\r\n\r\n    render() { \r\n        return null;\r\n    }\r\n}\r\n \r\nexport default Logout;","import React, { Component } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport auth from '../../services/authService';\r\n\r\nconst ProtectedRoute = ({ path, component: Component, render, ...rest}) => {\r\n    return ( \r\n        <Route \r\n              {...rest}\r\n              render={props => {\r\n\r\n                console.log(props);\r\n\r\n                if(!auth.getCurrentUser()) return <Redirect to= {{\r\n                    pathname: '/login',\r\n                    state: { from: props.location }\r\n                }} />;\r\n                return Component ? <Component {...props} /> : render(props);\r\n              }} \r\n        />       \r\n     );\r\n};\r\n \r\nexport default ProtectedRoute;","// Objects from 3rd Party Libraries:\nimport React, { Component } from 'react';\nimport { Route, Redirect, Switch } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\n// Components from our Application:\nimport Movies from './components/movies';\nimport MovieForm from './components/movieForm';\nimport Customers from './components/customers';\nimport Rentals from './components/rentals';\nimport NotFound from './components/notFound';\nimport NavBar from './components/navBar';\nimport LoginForm from './components/loginForm';\nimport RegisterForm from './components/registerForm';\nimport Logout from './components/logout';\nimport ProtectedRoute from './components/common/protectedRoute';\n// Services:\nimport auth from './services/authService';\n// CSS Modules:\nimport 'react-toastify/dist/ReactToastify.css';\nimport './App.css';\n\n\nclass App extends Component {\n\n  state = {};\n\n  // This method is called only 1 ones\n  // because App component is Mounted 1 ones only.\n  componentDidMount(){\n\n    // get Current User:\n    const user = auth.getCurrentUser();\n    // Update state:\n    this.setState({ user });\n\n  }\n\n  render() { \n    const { user } = this.state;\n    return ( \n      <React.Fragment>\n        <NavBar user={user}/>\n        <ToastContainer />\n        <main className=\"container\">\n          <Switch>\n            <Route path=\"/login\" component={LoginForm}></Route>\n            <Route path=\"/logout\" component={Logout}></Route>\n            <Route path=\"/Register\" component={RegisterForm}></Route>\n            <ProtectedRoute path=\"/movies/:id\" component={MovieForm} />\n            <Route \n              path=\"/movies\" \n              render={props => <Movies {...props} user={this.state.user} /> }>\n            </Route>\n            <Route path=\"/customers\" component={Customers}></Route>\n            <Route path=\"/rentals\" component={Rentals}></Route>\n            <Route path=\"/not-found\" component={NotFound}></Route> \n            <Redirect from=\"/\" exact to=\"/movies\" />\n            <Redirect to=\"not-found\" />\n          </Switch>\n        </main>\n      </React.Fragment>\n     );\n  }\n}\n \nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n// bootstrap.css\nimport 'bootstrap/dist/css/bootstrap.css';\n// font-awesome.css\nimport 'font-awesome/css/font-awesome.css';\n\n\nconsole.log(\"SUPERMAN\",process.env.REACT_APP_NAME);\n\n \nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}